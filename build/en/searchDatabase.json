[{"url":"https://baj.itch.io/drafft","title":"Download from Itch.io","plainTextContent":""},{"url":"https://bit.ly/33J1tls","title":"forums","plainTextContent":""},{"url":"/en/docs/features/game_design_document.html","title":"Game Design Document (GDD)","plainTextContent":"GAME DESIGN DOCUMENTS ¶\n\nCreate your game’s design document with Drafft and instantly share your concepts\nwith your team. Each member will have access to the GDD at the click of button.\n\nThe GDD editor is also great to take notes and gather ideas, as it has support\nfor gif, images, videos, to-do list, tables, Excel and LibreOffice tables and\nmuch more.\n\n[../_media/gdd-01.png]"},{"url":"/en/docs/features/script_editor.html","title":"Script editor for game development","plainTextContent":"SCRIPTING ¶\n\nDrafft’s powerful script editor uses simple plain text to tell your game’s\ncharacters exactly what to do and how to do it. With highlighted syntax keeping\neverything easy to read, Drafft’s scripting is a joy to use.\n\nScript Editor Example [/img/scripting-01.png]\n\nDrafft supports scripting in several languages complimenting each one with its\nvery simple own speech language which helps to extract and identify text for\nvoice-overs, expressions, commands and functions.\n\nEverything is converted to standard JSON when exporting, making the import\nprocess on the game engine quite straightforward.\n\n\nSCREENPLAYS ¶\n\nIt also features auto generated standard screenplay documents.\n\nScreenplay Example [/img/scripting-02.png]"},{"url":"/en/docs/features/dialogue_tree_editor.html","title":"Dialogue Tree Editor","plainTextContent":"POWERFUL DIALOGUE TREE EDITOR ¶\n\n> Non-Linear Branching Tree Graph or Scripts?\n\nAfter researching many methods for displaying complex non-linear dialogue, I\nfound that the combination of both worlds is necessary: A tree structure to show\nthe flow and branching of the scene and a scripting editor that does not force\nthe user to write in tiny boxes.\n\nComplex scenes can be made without cluttering the screen with tree nodes, but at\nthe same time having a visual representation really helps to visualize all the\npossible outcomes.\n\n\nDIALOGUE PLAYER ¶\n\nSimulate your script and branching paths with a built-in simple dialogue player.\n\nDialogue Player Example [/img/dialogue-player.png]\n\nDialogue Player Video [/img/dialogue-player.gif]"},{"url":"/en/docs/features/quests.html","title":"Quest editor for game design.","plainTextContent":"QUESTS ¶\n\nQuests can be actual quests, objectives or properties that need to be tracked in\nthe course of a game.\n\nquests [/img/quests-01.png]"},{"url":"/en/docs/features/items_database.html","title":"Items database.","plainTextContent":"ITEMS ¶\n\nItems will let you have an Item database with custom properties to inject in\nyour game.\n\nFor example, this object.\n\nItems [/img/items-01.png]\n\nWill be exported as:\n\n\"items\": [\n  {\n    \"name\": \"Sword\",\n    \"content\": \"<p>Created on : Sun Dec 06 2020 21:32:13 GMT-0300 (Argentina Standard Time)</p>\",\n    \"type\": \"Item\",\n    \"parent\": null,\n    \"icon\": \"file\",\n    \"color\": \"#cec4d1\",\n    \"path\": \"Sword\",\n    \"isClonable\": true,\n    \"isRemovable\": true,\n    \"isReadOnly\": false,\n    \"created\": \"Sun Dec 06 2020 21:32:13 GMT-0300 (Argentina Standard Time)\",\n    \"modified\": \"Sun Dec 06 2020 21:38:21 GMT-0300 (Argentina Standard Time)\",\n    \"comments\": \"\",\n    \"collection\": \"Item\",\n    \"locked\": false,\n    \"lockedBy\": \"baj\",\n    \"alias\": \"hawk\",\n    \"properties\": {\n      \"damage\": 100,\n      \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n      \"required_level\": 5,\n      \"bonus\": {\n        \"water\": 10,\n        \"fire\": 5,\n        \"air\": -3\n      }\n    },\n    \"editorLanguage\": \"hjson\",\n    \"prefix\": \"hawk\",\n    \"_id\": \"75b1e7ad-7474-46bb-8217-1ebbc6475168\",\n    \"_rev\": \"25-a0fa83ec9a6357ba12764630d19e63af\"\n  }\n],\n"},{"url":"/en/docs/features/misc_database.html","title":"Misc object editor","plainTextContent":"MISC OBJECTS ¶\n\nMisc objects can also added and exported to the engine, this is good for main\nmenus, default options, etc.\n\nmisc items [/img/misc-01.png]"},{"url":"/en/docs/features/kanban_boards.html","title":"Kanban Boards","plainTextContent":"KANBAN BOARDS ¶\n\n> Take notes of your to-dos in a quick and straightforward fashion.\n\nNot intended to replace popular tools like Trello, but having the option to note\ndown that last minute idea into the project quick and easy is very convenient.\n\nKanban Board Example [/img/kanban-01.png]"},{"url":"/en/docs/features/export-mappings.html","title":"Export Mappings","plainTextContent":"CUSTOMIZABLE EXPORT MAPPINGS ¶\n\nIn order to support custom implementations it is possible to completely rewrite\nDrafft’s scripting syntax text at export to conform the target language.\n\nFor example, for C#, you could theoretically map <Commands> to standard C#\nclasses and use reflection to avoid writing any parser at all!\n\nexport-mappings [/img/export-mappings-01.png]"},{"url":"/en/docs/features/director-module.html","title":"Director Module","plainTextContent":"THE DIRECTOR MODULE ¶\n\nDetail optional character information here to compliment your project’s GDD or\nto give you voice actors some background on your characters. Export voice-over\nscripts in industry standard script format or just as a regular text file.\nExport tagged lines for audio processing, clip identification and localization.\n\ndirector [/img/director-01.png]\n\ndirector [/img/director-02.png]"},{"url":"/en/docs/features/multi-user.html","title":"Drafft multiuser feature.","plainTextContent":"MULTIUSER ¶\n\nSeveral users can work offline on the same database and sync changes in real\ntime to a remote master database."},{"url":"/en/docs/features/development.html","title":"Development","plainTextContent":"CONSTANT DEVELOPMENT ¶\n\nDrafft is in constant development, future updates will (hopefully) include:\n\n * Key Ring: This section will have a tree structure(much like everything else)\n   where you will be able to mass import licence keys for services(steam,\n   itch.io [http://itch.io], etc) and then you will be able to assign it to\n   users and mark them as used.Keys should be encrypted.\n * Localization: Scripts and Dialogues needs to be imported/written and exported\n   in different languages.\n * presskit() generator.\n\nFor any specific request please let me know in the forums\n[https://baj.itch.io/drafft/community]"},{"url":"/en/docs/documentation/scripting.html","title":"Drafft Scripting Syntax","plainTextContent":"SCRIPTING SYNTAX ¶\n\nThe idea behind drafft is that it should be engine and language agnostic. So you\nare allowed to use whatever language you prefer for your scripts. However, there\nare certain features that, due to its nature, need to be able to identify the\npurpose of the line. For this purpose the drafft syntax (UAF) was created. It is\nused for very specific purposes and can be ignored if not needed:\n\n\nCOMMANDS ¶\n\nCommands are just functions. The benefit of using drafft syntax is that they\nwill appear in the resulting screenplay [screenplay_generation.html]\n\n<Commands(param, param)>\n\n\nSPECIAL CASES ¶\n\nFade commands <FadeOut(?params)> and <FadeIn(?params)> also get some special\ntreatment in the screenplay output.\n\n\nEXAMPLES: ¶\n\n<Wait(5)>\n<Focus(actor)>\n<FadeOut()>\n<WalkTo(x,y,z)>\n\n\nCommands can also be renamed at export to a syntax more useful for the target\nengine. See Export Mappings [exporting.html]\n\n\nACTOR LINE (WITH SPEECH TAG) ¶\n\n::Actor::Actor Line [expression] or [#speechTag] ::Actor::Actor Line\n[expression]\n\nThis is the most important concept in drafft, this line represent a line of\nspeech an actor says. It has several uses:\n\n * Identifying actors to make the actor database.\n * Identifying speech lines to auto generate tags for voice-overs.\n * Include this line on the resulting screenplay.\n * Include expressions in screenplay.\n\nActor lines can also be renamed at export to a syntax more useful for the target\nengine. See Export Mappings [exporting.html]\n\n\nEXAMPLES: ¶\n\n::Tyler::The first rule of Fight Club is: You do not talk about Fight Club.[serious]\n[#line001]::Travis::You talkin' to me?\n\n\n\n\nCOMMENTS ¶\n\n// Comment\n\nComments are lines that are commonly ignored in the target engine. Drafft will\ninclude comments in the screenplay [screenplay_generation.html].\n\n\nEXAMPLE ¶\n\n// INT. SUBURBAN HOME - KITCHEN - NIGHT\n// FILBERT (9), wiry, lost in his own imaginary world. Dressed as a Knight. A toy sword in his other hand.\n"},{"url":"/en/docs/documentation/multiuser.html","title":"Drafft Multiuser Feature","plainTextContent":"MULTI-USER (REMOTE REPLICATION) ¶\n\nWith the power of couchdb, drafft supports realtime multiuser sync to a remote\ndatabase.\n\nEvery time a user make a change it will sync the changes to the remote server.\nNow each client will poll this server for changes in “Remote sync interval”\nseconds, merging the changes on their local database.\n\nThat’s why the lock/unlock mechanism was added. We can replicate in real-time,\nbut with the condition that no 2 users are modifying the same item.\n\n\nREQUIREMENTS ¶\n\n * A couchdb [https://couchdb.apache.org/] server, with admin permissions. A\n   dedicated server for drafft is recommended. The easiest way to get it running\n   is using the official docker image [https://hub.docker.com/_/couchdb/]\n * Connectivity of each computer to the server.\n * Each user should have a distinctive username\n * Each user should init a project with the same name.\n\n\nENABLING REMOTE SYNC ¶\n\n 1. First a user set up a project and give it a name. eg: ‘multiuser’\n 2. In options section, they setup a unique username.\n 3. In project settings => remote replication section, they enable the feature\n    and input the database url (must include http(s)😕\n    [https://twemoji.maxcdn.com/v/14.0.2/72x72/1f615.png]/)\n 4. Every other user repeats the same procedure.\n 5. profit.\n\n\nSYNC ISSUES ¶\n\nAlthough the process is simple and it’s quite tested, certain networking\nconditions, or a user working offline, could potentially overwrite another\nuser’s work if they work on the same item. It is recommended that the\nmodifications are done when online or that the team organize the workflow to\navoid such issues.\n\nRemember that making backups is always a good practice.\n\n\nNOTES ¶\n\n * Couchdb doesn’t allow capital letters so drafft doesnt allow it either (when\n   you create it uppercase the databse name will be renamed to lowercase).\n * All table names will appear as drafft_project_name_lowercase\n * CORS must be enabled in couchdb: https://docs.couchdb.org/en/1.3.0/cors.html\n   [https://docs.couchdb.org/en/1.3.0/cors.html]\n * Database url MUST start with http:// or https://\n\n\nVIDEO ¶"},{"url":"/en/docs/documentation/exporting.html","title":"Exporting","plainTextContent":"EXPORTING ¶\n\nIn order to use drafft database in a game engine, an export needs to be done. It\nwill generate a plain JSON file with all the necessary data.\n\n> Psst! using Godot? Check out the drafft importer for godot\n> [https://github.com/ajboni/godot-drafft-import/]\n\n\nEXPORT MAPPINGS ¶\n\nWhen an game export is performed, the Export Mappings kicks in and modify, if\nnecessary, each recognized line.\n\nA recognized line is one of the following:\n\n[#audiotag]::Actor::Speech text [?expression]  \n::Actor::Speech text [?expression]  \n<Command(?param1, ?param2, ?etc)>  \n*expression*  and *param* are optional.\n\n\nTo generate the mappings, create the desired output using the following\nvariables: %tag - %actor - %speech - %expression - %json - %command - %params or\n%params(separator). For example, you could set up the speech export mapping to\nrewrite the output as a dict inside JSON so its easily parseable:\n\nExport Mapping [/img/export-mappings-02.png]\n\nDrafft support different exporting rules for different languages, so be sure to\nmatch the source language with the target language mapping.\n\nExport Mapping [/img/export-mappings-03.png]\n\nThe result will be something like this:\n\nExport Mapping [/img/export-mappings-04.png]\n\nNote how the ‘content’ property was rewritten according to our needs.\n\n\nINLINE JSON ¶\n\nSince v1.0.13 it is possible to inline standard JSON in both speech and commands\nlines. %json variable will contain parsed content.\n\nConsider this example:\n\n::Reporter:: Now let's take a look at the weather for today. \n<CutTo(Location1)> {\"weather\":\"rainy\"} \n::FieldReporter:: Not looking very good here. {\"props\":[\"umbrella\",\"raincoat\", \"microphone\"]}\n<CutTo(Studio)>\n::Reporter:: What's the traffic on your side Mike? \n<CutTo(Location2)> {\"traffic\": {\"cars\": \"low\", \"trucks\":\"none\"}}\n::Mike:: Low traffic in this area. \n\n\nAnd this export mappings:\nSPEECH: {\"speech\":\"%speech\", \"json\":\"%json\"}\nCOMMAND: {\"command\":\"%command(%params)\", \"json\":\"%json\"}\n\nThe result will be something like this:\n\n{\"speech\":\"Now let's take a look at the weather for today.\", \"json\":\"{}\"}\n{\"command\":\"CutTo(Location1)\", \"json\":\"{\"weather\":\"rainy\"}\"} \n{\"speech\":\"Not looking very good here.\", \"json\":\"{\"props\":[\"umbrella\",\"raincoat\",\"microphone\"]}\"}\n{\"command\":\"CutTo(Studio)\", \"json\":\"{}\"}\n::Reporter:: What's the traffic on your side Mike? \n{\"command\":\"CutTo(Location2)\", \"json\":\"{\"traffic\":{\"cars\":\"low\",\"trucks\":\"none\"}}\"}\n::Mike:: Low traffic in this area.\n\n\nERROR HANDLING ¶\n\nIf JSON fails to parse, the JSON part will be added as regular speech in speech\nlines and completely omitted in command lines:\n\n{\"description\":\"This JSON will be exported as is\"}\n<CutTo(Location2)>{bad:json}\n::Narrator::This is a {Bad JSON}, but this is a {\"Json\":true} good one!\n::Narrator::This is another {\"bad\":\"JSON\".\n\n\nWith the same export mappings as above, this will output:\n\n{\"description\":\"This JSON will be exported as is\"}\n{\"command\":\"CutTo(Location2)\", \"json\" :\"{}\"}\n{\"speech\":\"This is a {Bad JSON}, but this is a good one!\", \"json\":\"{\"Json\":true}\"}\n{\"speech\":\"This is another {\"bad\":\"JSON\".\", \"json\":\"{}\"}\n\n\n> JSON objects WILL NOT be shown in Director/Tagged Scripts, Screenplays or\n> Dialogue Simulator."},{"url":"/en/docs/documentation/screenplay_generation.html","title":"Screen Play Generation","plainTextContent":"SCREEN PLAY GENERATION ¶\n\nIf the scripts are written in Drafft Scripting Syntax [scripting.html] drafft\ncan automatically detect speech lines and generate a standard screenplay.\n\nThis is useful to hand over to voice actors as the format is commonly used in\nthe industry.\n\nScreenplay [/img/scripting-02.png]\n\n\nSPECIAL COMMANDS ¶\n\nSome commands, if used, will have an impact in the screenplay generation:\n\n * Comments // Comment will be used as Action.\n * <FadeIn(time)> and <FadeOut(time) will be used as transitions\n * <CutTo(location)> will be used as Scene Heading.\n * [Expression] will be used as Parenthetical.\n\nExample:\n\n<FadeIn()>\n<CutTo(INT, STUDIO)>   \n// Early in the morning the team delivers the news with participation of many field reporters across the country.\n[#net_SqCu]::Reporter:: Now let's take a look at the weather for today.\n<CutTo(EXT, LOCATION 1 - DAY)> {\"weather\":\"rainy\"} \n[#net_JZbb]::FieldReporter:: Not looking very good here. [worried] {\"props\":[\"umbrella\",\"raincoat\", \"microphone\"]}\n<CutTo(INT, STUDIO)>   \n[#net_Oa8v]::Reporter:: What's the traffic on your side Mike?\n<CutTo(EXT, MIKE LOCATION)> {\"traffic\": {\"cars\": \"low\", \"trucks\":\"none\"}}\n[#net_8Swf]::Mike:: Low traffic in this area.   \n\n\nWill produce the following screenplay:\n\nScreenplay [/img/screenplay-01.jpg]"},{"url":"/en/docs/index.html","title":"Drafft","plainTextContent":"DRAFFT ¶\n\n> Cross-platform collaborative and organized game development.\n\nDRAFFT is a multiplatform collaborative design and development tool for easy and\norganized game development. It features a GDDs editor, Script editor, Dialogue\nTrees editor, a generic Database Editor and game ready exporter in plain JSON\nformat.\n\nThe project aims to solve file clutter while providing a centralized environment\nfor every aspect of your project.\n\ndrafft by baj [https://baj.itch.io/drafft]\n\n\nFEATURES ¶\n\n * GDDs, Scripts, Dialogue Trees and Generic Database Editor and exporter.\n * One repository: All your data in one place, sorted, searchable, editable.\n * Your Game, your data: You own your data, it lives on your computer and it can\n   be optionally synced to a remote database.\n * Multi user: Several users can work offline on the same database and sync\n   changes in real time to a remote master database.\n * Nice UI: Because staring at a screen while building the next big hit should\n   be a pleasant experience.\n * Engine Agnostic: Standard JSON export for any usage.\n\n\nHOW DO I AUTHORIZE DRAFFT? ¶\n\nYou can use DRAFFT in evaluation mode for as long as you want, without any\nmissing feature.\n\nDrafft licence is very reasonably priced. If you enjoyed the software or you\nfind it useful please consider supporting development by purchasing the full\nversion.\n\nSee more details at: https://baj.itch.io/drafft [https://baj.itch.io/drafft]"}]