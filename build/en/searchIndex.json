{"keys":[{"path":["plainTextContent"],"id":"plainTextContent","weight":1,"src":"plainTextContent"},{"path":["title"],"id":"title","weight":12,"src":"title"},{"path":["url"],"id":"url","weight":0.5,"src":"url"}],"records":[{"i":0,"$":{"1":{"v":"Download from Itch.io","n":0.577},"2":{"v":"https://baj.itch.io/drafft","n":1}}},{"i":1,"$":{"1":{"v":"forums","n":1},"2":{"v":"https://bit.ly/33J1tls","n":1}}},{"i":2,"$":{"0":{"v":"GAME DESIGN DOCUMENTS ¶\n\n[/img/gdd-02.jpg]\n\nCreate your game’s design document with Drafft and instantly share your concepts\nwith your team. Each member will have access to the GDD at the click of button.\n\nThe GDD editor is also great to take notes and gather ideas, as it has support\nfor gif, images, videos, to-do list, tables, Excel and LibreOffice tables and\nmuch more.","n":0.132},"1":{"v":"Game Design Document (GDD)","n":0.5},"2":{"v":"/en/docs/features/game_design_document.html","n":1}}},{"i":3,"$":{"0":{"v":"SCRIPTING ¶\n\nDrafft’s powerful script editor uses simple plain text to tell your game’s\ncharacters exactly what to do and how to do it. With highlighted syntax keeping\neverything easy to read, Drafft’s scripting is a joy to use.\n\nScript Editor Example [/img/scripting-01.png]\n\nDrafft supports scripting in several languages complimenting each one with its\nvery simple own speech language which helps to extract and identify text for\nvoice-overs, expressions, commands and functions.\n\nEverything is converted to standard JSON when exporting, making the import\nprocess on the game engine quite straightforward.\n\n\nSCREENPLAYS ¶\n\nIt also features auto generated standard screenplay documents.\n\nScreenplay Example [/img/scripting-02.png]","n":0.105},"1":{"v":"Script editor for game development","n":0.447},"2":{"v":"/en/docs/features/script_editor.html","n":1}}},{"i":4,"$":{"0":{"v":"POWERFUL DIALOGUE TREE EDITOR ¶\n\n> Non-Linear Branching Tree Graph or Scripts?\n\nAfter researching many methods for displaying complex non-linear dialogue, I\nfound that the combination of both worlds is necessary: A tree structure to show\nthe flow and branching of the scene and a scripting editor that does not force\nthe user to write in tiny boxes.\n\nComplex scenes can be made without cluttering the screen with tree nodes, but at\nthe same time having a visual representation really helps to visualize all the\npossible outcomes.\n\n\nDIALOGUE PLAYER ¶\n\nSimulate your script and branching paths with a built-in simple dialogue player.\n\nDialogue Player Example [/img/dialogue-player.png]\n\nDialogue Player Video [/img/dialogue-player.gif]","n":0.101},"1":{"v":"Dialogue Tree Editor","n":0.577},"2":{"v":"/en/docs/features/dialogue_tree_editor.html","n":1}}},{"i":5,"$":{"0":{"v":"QUESTS ¶\n\nQuests can be actual quests, objectives or properties that need to be tracked in\nthe course of a game.\n\nquests [/img/quests-01.png]","n":0.224},"1":{"v":"Quest editor for game design.","n":0.447},"2":{"v":"/en/docs/features/quests.html","n":1}}},{"i":6,"$":{"0":{"v":"ITEMS ¶\n\nItems will let you have an Item database with custom properties to inject in\nyour game.\n\nFor example, this object.\n\nItems [/img/items-01.png]\n\nWill be exported as:\n\n\"items\": [\n  {\n    \"name\": \"Sword\",\n    \"content\": \"<p>Created on : Sun Dec 06 2020 21:32:13 GMT-0300 (Argentina Standard Time)</p>\",\n    \"type\": \"Item\",\n    \"parent\": null,\n    \"icon\": \"file\",\n    \"color\": \"#cec4d1\",\n    \"path\": \"Sword\",\n    \"isClonable\": true,\n    \"isRemovable\": true,\n    \"isReadOnly\": false,\n    \"created\": \"Sun Dec 06 2020 21:32:13 GMT-0300 (Argentina Standard Time)\",\n    \"modified\": \"Sun Dec 06 2020 21:38:21 GMT-0300 (Argentina Standard Time)\",\n    \"comments\": \"\",\n    \"collection\": \"Item\",\n    \"locked\": false,\n    \"lockedBy\": \"baj\",\n    \"alias\": \"hawk\",\n    \"properties\": {\n      \"damage\": 100,\n      \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n      \"required_level\": 5,\n      \"bonus\": {\n        \"water\": 10,\n        \"fire\": 5,\n        \"air\": -3\n      }\n    },\n    \"editorLanguage\": \"hjson\",\n    \"prefix\": \"hawk\",\n    \"_id\": \"75b1e7ad-7474-46bb-8217-1ebbc6475168\",\n    \"_rev\": \"25-a0fa83ec9a6357ba12764630d19e63af\"\n  }\n],\n","n":0.087},"1":{"v":"Items database.","n":0.707},"2":{"v":"/en/docs/features/items_database.html","n":1}}},{"i":7,"$":{"0":{"v":"GRIDS ¶\n\nInput fixed schema data in excel-like spreadsheet tables.\n\nmisc items [/img/grids-01.png]","n":0.302},"1":{"v":"Grids Database","n":0.707},"2":{"v":"/en/docs/features/grids_database.html","n":1}}},{"i":8,"$":{"0":{"v":"MISC OBJECTS ¶\n\nMisc objects can also added and exported to the engine, this is good for main\nmenus, default options, etc.\n\nmisc items [/img/misc-01.png]","n":0.213},"1":{"v":"Misc object editor","n":0.577},"2":{"v":"/en/docs/features/misc_database.html","n":1}}},{"i":9,"$":{"0":{"v":"KANBAN BOARDS ¶\n\n> Take notes of your to-dos in a quick and straightforward fashion.\n\nNot intended to replace popular tools like Trello, but having the option to note\ndown that last minute idea into the project quick and easy is very convenient.\n\nKanban Board Example [/img/kanban-01.png]","n":0.152},"1":{"v":"Kanban Boards","n":0.707},"2":{"v":"/en/docs/features/kanban_boards.html","n":1}}},{"i":10,"$":{"0":{"v":"CUSTOMIZABLE EXPORT MAPPINGS ¶\n\nIn order to support custom implementations it is possible to completely rewrite\nDrafft’s scripting syntax text at export to conform the target language.\n\nFor example, for C#, you could theoretically map <Commands> to standard C#\nclasses and use reflection to avoid writing any parser at all!\n\nexport-mappings [/img/export-mappings-01.png]","n":0.146},"1":{"v":"Export Mappings","n":0.707},"2":{"v":"/en/docs/features/export-mappings.html","n":1}}},{"i":11,"$":{"0":{"v":"THE DIRECTOR MODULE ¶\n\nDetail optional character information here to compliment your project’s GDD or\nto give you voice actors some background on your characters. Export voice-over\nscripts in industry standard script format or just as a regular text file.\nExport tagged lines for audio processing, clip identification and localization.\n\ndirector [/img/director-01.png]\n\ndirector [/img/director-02.png]","n":0.144},"1":{"v":"Director Module","n":0.707},"2":{"v":"/en/docs/features/director-module.html","n":1}}},{"i":12,"$":{"0":{"v":"MULTIUSER ¶\n\nSeveral users can work offline on the same database and sync changes in real\ntime to a remote master database.\n\nSee Docs [/en/docs/documentation/multiuser.html]","n":0.213},"1":{"v":"Drafft multiuser feature.","n":0.577},"2":{"v":"/en/docs/features/multi-user.html","n":1}}},{"i":13,"$":{"0":{"v":"CONSTANT DEVELOPMENT ¶\n\nDrafft is in constant development, for any specific request please visit the\nDrafft forums [https://baj.itch.io/drafft/community]","n":0.25},"1":{"v":"Development","n":1},"2":{"v":"/en/docs/features/development.html","n":1}}},{"i":14,"$":{"0":{"v":"QUICK START ¶\n\nA good way to start experimenting with the app is to load a sample project and\nplay around.\nCurrently there are two very basic projects:\n\n 1. The goddess of fate\n    [https://github.com/ajboni/drafft-examples/blob/main/projects/The%20goddess%20of%20fate..json]:\n    A Dialogue based visual novel about the zodiac.\n 2. One Bullet\n    [https://github.com/ajboni/drafft-examples/blob/main/projects/One%20Bullet.json]:\n    A Mockup for a point and click game about a heist. Work in progress.\n\n> If you want to contribute your project to this section, please make a pull\n> request on the examples repo [https://github.com/ajboni/drafft-examples]\n\n\nIMPORTING A PROJECT. ¶\n\n 1. Download the example project json file: for this document we will use The\n    goddess of fate\n    [https://github.com/ajboni/drafft-examples/blob/main/projects/The%20goddess%20of%20fate..json]:\n    A Dialogue based visual novel about the zodiac.\n 2. Launch the app.\n 3. Go to Project Manager and click on Restore Database from file in a new\n    project\n 4. Enter a name and click ok.\n 5. Select the json file. The project will load.\n\n\nSECTIONS ¶\n\nThe left sidebar content will change with all available modules of the app, we\nwill quickly visit each one to get a general overview of the features.\n\n\nOPTIONS ¶\n\nYou should setup your username here if you are planning to use it in a team.\nOther options are self explanatory.\n\n\nPROJECT MANAGER ¶\n\nThis is where you can create, load, delete and restore projects. Not much to do\nhere now.\n\n\nPROJECT SETTINGS ¶\n\nThis is where you can set up project options and metadata and certain default\nbehaviours.\nA very important section here is the Export Options page where you can set up\ndifferent mappings that will be applied when generating the game export as well\nas what sections will be exported.\n\n\nDESIGN DOCUMENTS ¶\n\nHere is the place where to add documents, notes, story bits, etc. You will\nnotice the loaded project has a “summary” document, if you try to edit it you\nwill not be able to do so. That’s because the document is not “locked for\nediting”.\n\n\nEDITING DOCUMENTS ¶\n\nDrafft supports realtime collaboration, with the condition that each user\n“locks” the document that they are working on to avoid concurrency issues.\nEven when using the app as a single user, each document will need to be locked\nbefore it being able to be modified.\n\nGo ahead and click the edit button on the toolbar. Some actions on the toolbar\nlike delete or rename will be available now. Also notice that there should be a\npadlock icon with your username simbolizing the status of the document.\n\n> You can double-click on the doc text to lock the document (works also on\n> scripts).\n\nMake some changes to the file and click the save button. The file icon should\ndisappear and the file will be available to other user.\n\nYou can have a play exploring the file creation or editing processes, also take\na look at the timeline feature if you want. Once ready lets move to the script\nsection.\n\n\nSCRIPTS ¶\n\nThis is one of the main sections of the app, a script is data that you will\nprovide to your game and it can be written in any language.\nA script could be a standalone document or be part of a dialogue tree. Instead\nof relying on writing int each dialogue tree node, each node will have its own\nscript attached, but more on that later.\nYou will notice two items in the file tree: goToLibrary is a really simple\nscript executing a command and a special read-only “Dialogues” folder which\ncontains all scripts that are part of a dialogue Documents, lets ignore that for\nnow.\n\n * Select goToLibrary and double-click on the text area. Press the Toggle editor\n   hotkeys panel button. This will open a sidebar on the right with some\n   shortcuts, these will be really useful for repetitive tasks like adding\n   speech actions.\n * Modify ctrl+4 shortcut and add the following: ::Narrator:: % deals % damage.\n * Focus the text area and press ctrl+4. Each time a % appears in the shortcut\n   it will ask the user for a value. Put Max and 66 or whatever you want there.\n\nYou will also notice that <PlayDialogueByAlias(area)> and ::Narrator:: are\nhighlighted differently and that is because they are part of the really small\nDrafft Scripting Syntax [scripting.html]. Go have a read on that page document\nfor a quick overview. I’ll wait…\n\nAlso note that this script has and id and an alias shown in the script editor\nfooter.\n\n\nDIALOGUES ¶\n\nThe script concept can also be applied to dialogues. Drafft will give the chance\nto design a dialogue tree with the possibility to attach a script to each node.\nThe way of structuring a dialogue tree is up to you, but the intended idea is to\ndo linear logic inside the script, and use the tree as a branching mechanism.\nThis will make the tree less convoluted.\n\nA dialogue tree consist in a series of nodes interconnected (or not). Drafft\nprovides 5 different nodes which should be enough to implement any logic in\ncombination with a script.\n\n * Start node its a 1 Output node, its intended usage is for the developer to\n   identify where to position the dialogue when starting it.\n * Script node is a 1 Input -> 1 Output node that carries an associated script.\n   This is intended for running game logic or linear dialogue.\n * Choice node is a 1 Input -> n Outputs node intended for branching logic.\n * End nodes is a 1 Input only node intended to provide a flag on where a branch\n   hit a dead.\n * Similarly the Return node is 1 Input only node intended to provide aflags on\n   where a branch hit a dead and should return to the choice node, or any other\n   custom logic. This is to avoid populating the graph with lots of arrows going\n   back.\n\n> Even though the script node is intended to provide scripting logic, any node\n> can have a linked script.\n\n[/img/tutorial-03.png]\n\nGo to the Dialogues section and load the Aries - 01 - Aries Ecounter dialogue\nand click each node to inspect the associated script. Feel free to experiment\nediting and moving/linking nodes.\n\n[/img/tutorial-04.png]\n\nWith the document locked for edits, select the first node , the green starting\nnode and add a few lines at the start:\n\n::Mother:: I saw Kenji walking all day looking for something.\n::Mother:: Maybe he has a new job.\n::Mother:: [Happy] Finally!\n\n\n\nDETECTING ACTORS ¶\n\nIn order to update the Actor database we can simply click the Auto Detect Actors\nbutton in the toolbar. Click it, we will come back to this later. You should see\na message with the text: “Added 1 Actors: Mother”\n\n[/img/tutorial-auto-detecting-actors.png]\n\n\nGENERATION VOICE OVER TAGS ¶\n\nAs we are using the Drafft Scripting Syntax (UAF) we can automatically generate\na tag for each dialogue line, so in the future we can link our audio files with\neach line. This has the trade off to have the script filled with tags but on the\nother hand we don’t need any kind of metadata db for each line which would\nprobably make the editing experience more tedious. This tag can be of format but\nUAF identifies them with the following format: [#speechTag]::Actor::Actor Line\n[expression]\n\nIn order to keep that short, unique and identifiable , a combination of the\nscript alias and a short uuid is used for the generation. Go ahead a click the\n“Generate tags for current script” button. A success message should appear.\n\nReopen the node script to see the changes:\n\n[/img/tutorial-voice-over-tag-generation.png]\n\n\nPREVIEWING DIALOGUE ¶\n\nDrafft comes with a VERY basic dialogue and script player. With the dialogue\nselected click the Play Dialogue button.\n\nIn this screen basic navigation can be done to debug the dialogue logic.\n\nPreview Dialogue Tree [/img/tutorial-preview-dialogue-tree.png]\n\nAnother benefit of using Drafft Scripting Syntax [scripting.html] is that t can\nmake the previewing process a bit nicer ignoring non-dialogue and getting actors\nportraits and emotions. The speech only button will only move to ::ActorTag::\nlines.\n\n> Clicking on the text box will advance to the next line.\n\n\nDIRECTOR SECTION ¶\n\nIn the Director section we will find a list of Actors and properties that we can\nfill for our game.\n\nTo Be continued…\n\n> In the meantime, if you need help please visit the Drafft forums\n> [https://baj.itch.io/drafft/community]","n":0.028},"1":{"v":"Quick Start","n":0.707},"2":{"v":"/en/docs/documentation/quick_start.html","n":1}}},{"i":15,"$":{"0":{"v":"SCRIPTING SYNTAX ¶\n\nThe idea behind drafft is that it should be engine and language agnostic. So you\nare allowed to use whatever language you prefer for your scripts. However, there\nare certain features that, due to its nature, need to be able to identify the\npurpose of the line. For this purpose the drafft syntax (UAF) was created. It is\nused for very specific purposes and can be ignored if not needed:\n\n\nCOMMANDS ¶\n\nCommands are just functions. The benefit of using drafft syntax is that they\nwill appear in the resulting screenplay [screenplay_generation.html]\n\n<Commands(param, param)>\n\n\nSPECIAL CASES ¶\n\nFade commands <FadeOut(?params)> and <FadeIn(?params)> also get some special\ntreatment in the screenplay output.\n\n\nEXAMPLES: ¶\n\n<Wait(5)>\n<Focus(actor)>\n<FadeOut()>\n<WalkTo(x,y,z)>\n\n\nCommands can also be renamed at export to a syntax more useful for the target\nengine. See Export Mappings [exporting.html]\n\n\nACTOR LINE (WITH SPEECH TAG) ¶\n\n::Actor::Actor Line [expression] or [#speechTag] ::Actor::Actor Line\n[expression]\n\nThis is the most important concept in drafft, this line represent a line of\nspeech an actor says. It has several uses:\n\n * Identifying actors to make the actor database.\n * Identifying speech lines to auto generate tags for voice-overs.\n * Include this line on the resulting screenplay.\n * Include expressions in screenplay.\n\nActor lines can also be renamed at export to a syntax more useful for the target\nengine. See Export Mappings [exporting.html]\n\n\nEXAMPLES: ¶\n\n::Tyler::The first rule of Fight Club is: You do not talk about Fight Club.[serious]\n[#line001]::Travis::You talkin' to me?\n\n\n\n\nCOMMENTS ¶\n\n// Comment\n\nComments are lines that are commonly ignored in the target engine. Drafft will\ninclude comments in the screenplay [screenplay_generation.html].\n\n\nEXAMPLE ¶\n\n// INT. SUBURBAN HOME - KITCHEN - NIGHT\n// FILBERT (9), wiry, lost in his own imaginary world. Dressed as a Knight. A toy sword in his other hand.\n","n":0.061},"1":{"v":"Drafft Scripting Syntax","n":0.577},"2":{"v":"/en/docs/documentation/scripting.html","n":1}}},{"i":16,"$":{"0":{"v":"MULTI-USER (REMOTE REPLICATION) ¶\n\nWith the power of couchdb, drafft supports realtime multiuser sync to a remote\ndatabase.\n\nEvery time a user make a change it will sync the changes to the remote server.\nNow each client will poll this server for changes in “Remote sync interval”\nseconds, merging the changes on their local database.\n\nThat’s why the lock/unlock mechanism was added. We can replicate in real-time,\nbut with the condition that no 2 users are modifying the same item.\n\n\nREQUIREMENTS ¶\n\n * A couchdb [https://couchdb.apache.org/] server, with admin permissions. A\n   dedicated server for drafft is recommended. The easiest way to get it running\n   is using the official docker image [https://hub.docker.com/_/couchdb/]\n * Connectivity of each computer to the server.\n * Each user should have a distinctive username\n * Each user should init a project with the same name.\n\n\nENABLING REMOTE SYNC ¶\n\n 1. First a user set up a project and give it a name. eg: ‘multiuser’\n 2. In options section, they setup a unique username.\n 3. In project settings => remote replication section, they enable the feature\n    and input the database url (must include http(s)😕\n    [https://twemoji.maxcdn.com/v/14.0.2/72x72/1f615.png]/)\n 4. Every other user repeats the same procedure.\n 5. profit.\n\n\nSYNC ISSUES ¶\n\nAlthough the process is simple and it’s quite tested, certain networking\nconditions, or a user working offline, could potentially overwrite another\nuser’s work if they work on the same item. It is recommended that the\nmodifications are done when online or that the team organize the workflow to\navoid such issues.\n\nRemember that making backups is always a good practice.\n\n\nNOTES ¶\n\n * Couchdb doesn’t allow capital letters so drafft doesnt allow it either (when\n   you create it uppercase the databse name will be renamed to lowercase).\n * All table names will appear as drafft_project_name_lowercase\n * CORS must be enabled in couchdb: https://docs.couchdb.org/en/1.3.0/cors.html\n   [https://docs.couchdb.org/en/1.3.0/cors.html]\n * Database url MUST start with http:// or https://\n\n\nVIDEO ¶","n":0.058},"1":{"v":"Drafft Multiuser Feature","n":0.577},"2":{"v":"/en/docs/documentation/multiuser.html","n":1}}},{"i":17,"$":{"0":{"v":"EXPORTING ¶\n\nIn order to use drafft database in a game engine, an export needs to be done. It\nwill generate a plain JSON file with all the necessary data.\n\n> Psst! using Godot? Check out the drafft importer for godot\n> [https://github.com/ajboni/godot-drafft-import/]\n\n\nEXPORT MAPPINGS ¶\n\nWhen an game export is performed, the Export Mappings kicks in and modify, if\nnecessary, each recognized line.\n\nA recognized line is one of the following:\n\n[#audiotag]::Actor::Speech text [?expression]  \n::Actor::Speech text [?expression]  \n<Command(?param1, ?param2, ?etc)>  \n*expression*  and *param* are optional.\n\n\nTo generate the mappings, create the desired output using the following\nvariables: %tag - %actor - %speech - %expression - %json - %command - %params or\n%params(separator). For example, you could set up the speech export mapping to\nrewrite the output as a dict inside JSON so its easily parseable:\n\nExport Mapping [/img/export-mappings-02.png]\n\nDrafft support different exporting rules for different languages, so be sure to\nmatch the source language with the target language mapping.\n\nExport Mapping [/img/export-mappings-03.png]\n\nThe result will be something like this:\n\nExport Mapping [/img/export-mappings-04.png]\n\nNote how the ‘content’ property was rewritten according to our needs.\n\n\nINLINE JSON ¶\n\nSince v1.0.13 it is possible to inline standard JSON in both speech and commands\nlines. %json variable will contain parsed content.\n\nConsider this example:\n\n::Reporter:: Now let's take a look at the weather for today. \n<CutTo(Location1)> {\"weather\":\"rainy\"} \n::FieldReporter:: Not looking very good here. {\"props\":[\"umbrella\",\"raincoat\", \"microphone\"]}\n<CutTo(Studio)>\n::Reporter:: What's the traffic on your side Mike? \n<CutTo(Location2)> {\"traffic\": {\"cars\": \"low\", \"trucks\":\"none\"}}\n::Mike:: Low traffic in this area. \n\n\nAnd this export mappings:\nSPEECH: {\"speech\":\"%speech\", \"json\":\"%json\"}\nCOMMAND: {\"command\":\"%command(%params)\", \"json\":\"%json\"}\n\nThe result will be something like this:\n\n{\"speech\":\"Now let's take a look at the weather for today.\", \"json\":\"{}\"}\n{\"command\":\"CutTo(Location1)\", \"json\":\"{\"weather\":\"rainy\"}\"} \n{\"speech\":\"Not looking very good here.\", \"json\":\"{\"props\":[\"umbrella\",\"raincoat\",\"microphone\"]}\"}\n{\"command\":\"CutTo(Studio)\", \"json\":\"{}\"}\n::Reporter:: What's the traffic on your side Mike? \n{\"command\":\"CutTo(Location2)\", \"json\":\"{\"traffic\":{\"cars\":\"low\",\"trucks\":\"none\"}}\"}\n::Mike:: Low traffic in this area.\n\n\nERROR HANDLING ¶\n\nIf JSON fails to parse, the JSON part will be added as regular speech in speech\nlines and completely omitted in command lines:\n\n{\"description\":\"This JSON will be exported as is\"}\n<CutTo(Location2)>{bad:json}\n::Narrator::This is a {Bad JSON}, but this is a {\"Json\":true} good one!\n::Narrator::This is another {\"bad\":\"JSON\".\n\n\nWith the same export mappings as above, this will output:\n\n{\"description\":\"This JSON will be exported as is\"}\n{\"command\":\"CutTo(Location2)\", \"json\" :\"{}\"}\n{\"speech\":\"This is a {Bad JSON}, but this is a good one!\", \"json\":\"{\"Json\":true}\"}\n{\"speech\":\"This is another {\"bad\":\"JSON\".\", \"json\":\"{}\"}\n\n\n> JSON objects WILL NOT be shown in Director/Tagged Scripts, Screenplays or\n> Dialogue Simulator.","n":0.053},"1":{"v":"Exporting","n":1},"2":{"v":"/en/docs/documentation/exporting.html","n":1}}},{"i":18,"$":{"0":{"v":"SCREEN PLAY GENERATION ¶\n\nIf the scripts are written in Drafft Scripting Syntax [scripting.html] drafft\ncan automatically detect speech lines and generate a standard screenplay.\n\nThis is useful to hand over to voice actors as the format is commonly used in\nthe industry.\n\nScreenplay [/img/scripting-02.png]\n\n\nSPECIAL COMMANDS ¶\n\nSome commands, if used, will have an impact in the screenplay generation:\n\n * Comments // Comment will be used as Action.\n * <FadeIn(time)> and <FadeOut(time) will be used as transitions\n * <CutTo(location)> will be used as Scene Heading.\n * [Expression] will be used as Parenthetical.\n\nExample:\n\n<FadeIn()>\n<CutTo(INT, STUDIO)>   \n// Early in the morning the team delivers the news with participation of many field reporters across the country.\n[#net_SqCu]::Reporter:: Now let's take a look at the weather for today.\n<CutTo(EXT, LOCATION 1 - DAY)> {\"weather\":\"rainy\"} \n[#net_JZbb]::FieldReporter:: Not looking very good here. [worried] {\"props\":[\"umbrella\",\"raincoat\", \"microphone\"]}\n<CutTo(INT, STUDIO)>   \n[#net_Oa8v]::Reporter:: What's the traffic on your side Mike?\n<CutTo(EXT, MIKE LOCATION)> {\"traffic\": {\"cars\": \"low\", \"trucks\":\"none\"}}\n[#net_8Swf]::Mike:: Low traffic in this area.   \n\n\nWill produce the following screenplay:\n\nScreenplay [/img/screenplay-01.jpg]","n":0.08},"1":{"v":"Screen Play Generation","n":0.577},"2":{"v":"/en/docs/documentation/screenplay_generation.html","n":1}}},{"i":19,"$":{"0":{"v":"API DOCUMENTATION ¶\n\nDrafft comes with an optional REST API for querying on a loaded project. It is\nan App Setting and can be enabled in options.\n\n> For now, this will only work if Drafft is running and a project is loaded.\n\n\nAPP OPTIONS ¶\n\n * Enable API: If true a REST API will be started when opening a project.\n * API Key: This API key will need to be present in the request header as\n   x-api-key\n * API Port: The port where the server will listen to connections. Default 9001\n\nApi Options [/img/api-options-01.png]\n\n\nAPI REFERENCE ¶\n\n\nGET GAME EXPORT ¶\n\nGets a game-ready JSON object. Same as clicking “Export Game Content” in the\napp.\n\nGET /game-export\n\n\nThe exported collections will be as defined in the project settings althought\nthey can be specified for further filtering with a collections field with comma\nseparated values:\n\nAccepted Values: ProjectSettings GDD Scripts Actors Quests Items Misc Grids\nKanban\n\nGET /game-export?collections=Scripts,Items,Actors\n\n\n[/img/api-game-export.png]\n\n\nGET DATABASE DUMP ¶\n\nGets a database dump directly from the PouchDB instance. It accepts any PouchDB\nallDocs options [https://pouchdb.com/api.html#batch_fetch]. Default options are\ninclude_docs: true and options.attachments: true\n\nGET /db-dump\nGET /db-dump\nGET /db-dump?include_docs=false&attachments=false&descending=true\n\n\nDatabase Dump [/img/api-db-dump.png]","n":0.076},"1":{"v":"Api Docs","n":0.707},"2":{"v":"/en/docs/documentation/api_docs.html","n":1}}},{"i":20,"$":{"0":{"v":"DRAFFT ¶\n\n> Cross-platform collaborative and organized game development.\n\nDRAFFT is a multiplatform collaborative design and development tool for easy and\norganized game development. It features a GDDs editor, Script editor, Dialogue\nTrees editor, a generic Database Editor and game ready exporter in plain JSON\nformat.\n\nThe project aims to solve file clutter while providing a centralized environment\nfor every aspect of your project.\n\ndrafft by baj [https://baj.itch.io/drafft]\n\n\nFEATURES ¶\n\n * GDDs, Scripts, Dialogue Trees and Generic Database Editor and exporter.\n * One repository: All your data in one place, sorted, searchable, editable.\n * Your Game, your data: You own your data, it lives on your computer and it can\n   be optionally synced to a remote database.\n * Multi user: Several users can work offline on the same database and sync\n   changes in real time to a remote master database.\n * Nice UI: Because staring at a screen while building the next big hit should\n   be a pleasant experience.\n * Engine Agnostic: Standard JSON export for any usage.\n\n\nHOW DO I AUTHORIZE DRAFFT? ¶\n\nYou can use DRAFFT in evaluation mode for as long as you want, without any\nmissing feature.\n\nDrafft licence is very reasonably priced. If you enjoyed the software or you\nfind it useful please consider supporting development by purchasing the full\nversion.\n\nSee more details at: https://baj.itch.io/drafft [https://baj.itch.io/drafft]","n":0.07},"1":{"v":"Drafft","n":1},"2":{"v":"/en/docs/index.html","n":1}}}]}